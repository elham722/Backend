using Backend.Application.Common.Commands;
using Backend.Application.Common.Interfaces.Infrastructure;
using Backend.Application.Features.UserManagement.DTOs;
using Backend.Domain.Entities.MFA;
using Backend.Domain.Enums;
using Backend.Domain.Interfaces.Repositories;
using Backend.Domain.ValueObjects.Common;
using MediatR;
using Microsoft.Extensions.Logging;

namespace Backend.Application.Features.UserManagement.Commands.MFA;

/// <summary>
/// Handler for SetupMfaCommand
/// </summary>
public class SetupMfaCommandHandler : ICommandHandler<SetupMfaCommand, MfaSetupDto>
{
    private readonly IMfaMethodRepository _mfaRepository;
    private readonly ITotpService _totpService;
    private readonly ISmsService _smsService;
    private readonly ILogger<SetupMfaCommandHandler> _logger;

    public SetupMfaCommandHandler(
        IMfaMethodRepository mfaRepository,
        ITotpService totpService,
        ISmsService smsService,
        ILogger<SetupMfaCommandHandler> logger)
    {
        _mfaRepository = mfaRepository ?? throw new ArgumentNullException(nameof(mfaRepository));
        _totpService = totpService ?? throw new ArgumentNullException(nameof(totpService));
        _smsService = smsService ?? throw new ArgumentNullException(nameof(smsService));
        _logger = logger ?? throw new ArgumentNullException(nameof(logger));
    }

    public async Task<MfaSetupDto> Handle(SetupMfaCommand request, CancellationToken cancellationToken)
    {
        try
        {
            _logger.LogInformation("Setting up MFA for user {UserId}, type {Type}", request.UserId, request.Type);

            // Check if MFA method already exists
            var existingMfa = await _mfaRepository.GetByUserIdAndTypeAsync(request.UserId, request.Type, cancellationToken);
            if (existingMfa != null)
            {
                _logger.LogInformation("MFA method already exists for user {UserId}, type {Type}", request.UserId, request.Type);
                return MapToDto(existingMfa);
            }

            // Create audit info
            var auditInfo = new AuditInfo(
                createdBy: request.UserId,
                createdAt: DateTime.UtcNow,
                ipAddress: request.IpAddress,
                userAgent: request.DeviceInfo
            );

            // Create MFA method based on type
            MfaMethod mfaMethod = request.Type switch
            {
                MfaType.TOTP => await CreateTotpMfaAsync(request.UserId, auditInfo, cancellationToken),
                MfaType.SMS => await CreateSmsMfaAsync(request.UserId, request.PhoneNumber!, auditInfo, cancellationToken),
                MfaType.BackupCodes => await CreateBackupCodesMfaAsync(request.UserId, auditInfo, cancellationToken),
                _ => throw new ArgumentException($"Unsupported MFA type: {request.Type}")
            };

            // Save to database
            await _mfaRepository.AddAsync(mfaMethod, cancellationToken);

            _logger.LogInformation("MFA setup completed successfully for user {UserId}, type {Type}", request.UserId, request.Type);

            return MapToDto(mfaMethod);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error setting up MFA for user {UserId}, type {Type}", request.UserId, request.Type);
            throw;
        }
    }

    private async Task<MfaMethod> CreateTotpMfaAsync(string userId, AuditInfo auditInfo, CancellationToken cancellationToken)
    {
        var mfa = MfaMethod.CreateTotp(userId, auditInfo);
        
        // Generate QR code URL using TOTP service
        var qrCodeUrl = _totpService.GenerateQrCodeUrl(
            mfa.TotpSecretKey!, 
            userId, 
            "BackendApp"
        );
        
        // Update the QR code URL (this would need a method in the entity or we'd need to recreate)
        // For now, we'll use the one generated by the entity
        return mfa;
    }

    private async Task<MfaMethod> CreateSmsMfaAsync(string userId, string phoneNumber, AuditInfo auditInfo, CancellationToken cancellationToken)
    {
        if (string.IsNullOrEmpty(phoneNumber))
            throw new ArgumentException("Phone number is required for SMS MFA", nameof(phoneNumber));

        // Validate phone number
        if (!_smsService.IsValidPhoneNumber(phoneNumber))
            throw new ArgumentException("Invalid phone number format", nameof(phoneNumber));

        var mfa = MfaMethod.CreateSms(userId, phoneNumber, auditInfo);
        return mfa;
    }

    private async Task<MfaMethod> CreateBackupCodesMfaAsync(string userId, AuditInfo auditInfo, CancellationToken cancellationToken)
    {
        var mfa = MfaMethod.CreateBackupCodes(userId, auditInfo);
        return mfa;
    }

    private static MfaSetupDto MapToDto(MfaMethod mfa)
    {
        return new MfaSetupDto
        {
            UserId = mfa.UserId,
            Type = mfa.Type,
            IsEnabled = mfa.IsEnabled,
            LastUsed = mfa.LastUsed,
            FailedAttempts = mfa.FailedAttempts,
            LockedUntil = mfa.LockedUntil,
            TotpSecretKey = mfa.TotpSecretKey,
            TotpQrCodeUrl = mfa.TotpQrCodeUrl,
            TotpDigits = mfa.TotpDigits,
            TotpPeriod = mfa.TotpPeriod,
            PhoneNumber = mfa.PhoneNumber,
            SmsCodeExpiry = mfa.SmsCodeExpiry,
            BackupCodes = mfa.BackupCodes,
            RemainingBackupCodes = mfa.RemainingBackupCodes,
            IsSetupComplete = mfa.IsEnabled,
            SetupMessage = GetSetupMessage(mfa),
            SetupSteps = GetSetupSteps(mfa)
        };
    }

    private static string GetSetupMessage(MfaMethod mfa)
    {
        if (mfa.IsEnabled)
            return $"{mfa.Type} MFA is already enabled";

        return mfa.Type switch
        {
            MfaType.TOTP => "Scan the QR code with your authenticator app",
            MfaType.SMS => "Enter your phone number to receive SMS codes",
            MfaType.BackupCodes => "Generate backup codes for account recovery",
            _ => "Complete the setup process"
        };
    }

    private static List<string> GetSetupSteps(MfaMethod mfa)
    {
        if (mfa.IsEnabled)
            return new List<string> { "MFA is already configured" };

        return mfa.Type switch
        {
            MfaType.TOTP => new List<string>
            {
                "Scan the QR code with Google Authenticator or Microsoft Authenticator",
                "Enter the 6-digit code from your app",
                "Click Enable to activate TOTP MFA"
            },
            MfaType.SMS => new List<string>
            {
                "Enter your phone number",
                "Click Send Code to receive SMS",
                "Enter the 6-digit code from SMS",
                "Click Enable to activate SMS MFA"
            },
            MfaType.BackupCodes => new List<string>
            {
                "Generate 10 backup codes",
                "Save codes in a secure location",
                "Click Enable to activate backup codes"
            },
            _ => new List<string> { "Follow the setup instructions" }
        };
    }
} 